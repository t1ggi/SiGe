	!-------------------------------------------------------------------------------------------------------------------------
	SUBROUTINE RELAX(STRUCT,POTENT_TYPE,DTIME,MAX_STEPS,PLT)

	USE MDTYPES
	USE MDCONSTS
	USE MDBOUNDS
	USE MDSTRUCT 
	USE MDRELAX	

	TYPE(T_STRUCT),INTENT(INOUT)::STRUCT
	REAL*8 DTIME
	INTEGER*4 MAX_STEPS
	INTEGER*2 POTENT_TYPE
	REAL*8 PLT

	REAL*8 E0,EK1,EP1,EK2,EP2
	REAL*8 DELTA,TIME
	INTEGER*4 STEP,SK
	REAL*8,POINTER,DIMENSION(:)::EK,EP
	INTEGER*4 CONT


	CALL CREATE_SYSTEM(STRUCT,DTIME)
	
	E0=ENERGY(STRUCT,POTENT_TYPE,SIZE(STRUCT%ATS))

	WRITE(*,*) 'E0=',E0
	! -------------------------------------------------------------------

	EK1=0.0
	EP1=E0	
      STEP=1
	TIME=0.0
	SK=0

	ALLOCATE(EK(1))
	ALLOCATE(EP(1))

	EK(1)=0.0
	EP(1)=E0
	DELTA=0.005	

	!----------------Õ≈œŒ—–≈ƒ—“¬≈ÕÕŒ –≈À¿ —¿÷»ﬂ----------------------------
	DO WHILE(STEP<MAX_STEPS)

	CALL SAVE_COORDS
	

	IF(POTENT_TYPE.EQ.P_TSF) THEN	 
	CALL ITER(TERSF_I)
	EP2=ENERGY(RSTR,P_TSF,SIZE(RSTR%ATS))
	ELSE 
	CALL ITER(STW_I)
	EP2=ENERGY(RSTR,P_STW,SIZE(RSTR%ATS))
	END IF

	EK2=EKIN(RSTR)


	WRITE(*,*) 'STEP=',STEP
	WRITE(*,*) 'EK1=',EK1,'EK2=',EK2
	WRITE(*,*) 'EP1=',EP1,'EP2=',EP2
	E1=EK1+EP1
	E2=EK2+EP2
	WRITE(*,*) 'E1=',E1,'E2=',E2
	WRITE(*,*) 'DEP=',EP1-EP2,'DEK=',EK2-EK1
	WRITE(*,*) 'E0=',E0

	IF10:IF(ABS((E2-E0)/E0).GT.DELTA.OR.(EP2-EP1)*(EK1-EK2).LT.0) THEN

	!»«Ã≈Õ≈Õ»ﬂ ›Õ≈–√»» Œ◊≈Õ‹ Ã¿À€ - Ã»Õ»Ã”Ã œŒ“≈Õ÷»¿À¿
	IF2:IF(ABS(EK1-EK2).LT.1E-6.OR.ABS(EP1-EP2).LT.1E-6) THEN

	WRITE(*,*) '-> ENERGY MINIMUM'

!	IF(ABS((EP2-E0)/E0).LT.0.001) EXIT
      IF3:IF(ABS((EP2-E0)/E0).LT.0.001) THEN 
	
	WRITE(*,*) 'DELTA E <0.001. CONTINUE RELAX? 0-NO,1-YES'
	READ(*,*) CONT
	IF(CONT.EQ.0) EXIT      

	END IF IF3



	CALL NULL_SPEEDS
	ALLOCATE(EK(1))
	ALLOCATE(EP(1))
	EK1=0.0
	E0=EP2
	EP1=EP2

	EK(1)=EK1
	EP(1)=EP2
	IF(DT.LT.1E-3) DT=1E-3


	ELSE  


	WRITE(*,*) 'ENERGY IS NOT KEPT'
	DT=DT*0.5
	SK=0	

	IF4:IF(DT.LT.1E-10) THEN

      WRITE(*,*) 'DT<1E-10'
	DT=0.001
	WRITE(*,*) 'CHANGE DELTA? 0-NO,1-YES'
	READ(*,*) REL
	 
	IF5:IF(REL.NE.0) THEN
	WRITE(*,*) 'INPUT DELTA'
	READ(*,*) DELTA
      END IF IF5 

	END IF	IF4

	WRITE(*,*) 'NEW DT=',DT	
	
	CALL LOAD_COORDS

	END IF	IF2


	ELSE

	STEP=STEP+1

	IF(MOD(STEP,10).EQ.0) THEN

	CALL SET_ENVIRS(RSTR,2.0*PLT*SQRT(3.0)/4.0)
	WRITE(*,*) 'ENVIRONMENT WAS FOUNDED'

	END IF

	TIME=TIME+DT
	WRITE(*,*) 'TIME=',TIME
	EK1=EK2
	EP1=EP2
	SK=SK+1

	IF(SK.GT.10.AND.DT.LE.0.0051) THEN
	SK=0
	DT=2.0*DT
	WRITE(*,*) 'NEW DT=',DT	 
	END IF

	NM=ADD(EP,EP2)
	NM=ADD(EK,EK2)

	!«¿Õ”À≈Õ»≈ — Œ–Œ—“≈…
	I6:IF(NM.GT.3.AND.EK(NM-2).LT.EK(NM-1).AND.EK(NM).LT.EK(NM-1))THEN	


	IF7:IF(ABS((EP2-E0)/E0).LT.0.001) THEN 
	
	WRITE(*,*) 'DELTA E <0.001. CONTINUE RELAX? 0-NO,1-YES'
	READ(*,*) CONT
	IF(CONT.EQ.0) EXIT      

	END IF IF7

	CALL NULL_SPEEDS
	E0=EP2
	WRITE(*,*) 'SPEEDS ARE NULL'

	EP1=EP2
	EK1=0.0

	ALLOCATE(EP(1))
	ALLOCATE(EK(1))
	EK(1)=EK1
	EP(1)=EP1

	IF(DT.LT.1E-3) DT=1E-3

		
      END IF 	I6


	END IF IF10	

	END DO

	DEALLOCATE(EK)
	DEALLOCATE(EP) 		 

	CALL GET_RESULT(STRUCT)
	CALL DESTROY_SYSTEM

	END SUBROUTINE
